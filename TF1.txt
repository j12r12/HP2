import numpy as np
import pandas as pd
from sklearn.preprocessing import OrdinalEncoder, OneHotEncoder, LabelEncoder, StandardScaler, FunctionTransformer
from sklearn.impute import SimpleImputer, MissingIndicator
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from funcs import model_fit, get_perm_imp, plot_pi
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor

train = pd.read_csv("train.csv")
test = pd.read_csv("test.csv")

train_target = train["SalePrice"].values

train_cols = list(train.columns)
test_cols = list(test.columns)

print([i for i in train if i not in test])
print([i for i in test if i not in train])

train = train.drop(["Id", "SalePrice"], axis=1)
test = test.drop(["Id"], axis=1)

cat_feets = train.select_dtypes(include="object").columns.tolist()
cont_feets = train.select_dtypes(include=np.number).columns.tolist()

all_feets = cat_feets + cont_feets

# Pipelines

cats = Pipeline(steps=[("cat_imp", SimpleImputer(strategy="most_frequent")), ("cat_enc", OrdinalEncoder())])
conts = Pipeline(steps=[("cont_imp", SimpleImputer(missing_values=np.nan, strategy="median"))])

ctf = ColumnTransformer([("cat", cats, cat_feets), ("cont", conts, cont_feets)], remainder="passthrough")

lr = LinearRegression()
rfr = RandomForestRegressor()

X_train, X_val, y_train, y_val = train_test_split(train, train_target, test_size=0.3, random_state=42)

X_train_tf = pd.DataFrame(ctf.fit_transform(X_train), columns=all_feets)
X_val_tf = pd.DataFrame(ctf.fit_transform(X_val), columns=all_feets)

model_fit(rfr, X_train_tf , y_train, X_val_tf, y_val)

bob = get_perm_imp(rfr, X_val_tf, y_val)

print(bob)

plot_pi(bob, limit=30)




